@model WeatherDashboard.Models.WeatherData
<div class="min-h-screen">
    <div class="mx-auto px-4 py-8 ">
        <div class="max-w-4xl mx-auto">
            <div class="flex justify-center mb-8">
                <form asp-action="GetWeather" method="get" class="w-full max-w-2xl">
                    <div class="flex gap-2">
                        <input type="text" name="location" class="flex-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                placeholder="Enter city, state or ZIP code">
                        <button type="submit" class="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">Search</button>
                    </div>
                </form>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                
                @if (Model != null)
                {
                    <div class="border-2 border-sky-500 bg-slate-50 p-4 rounded-lg shadow-2xl h-72">
                        <h2 class="text-2xl font-bold text-gray-800">@Model.Current.Name in @Model.Location</h2>
                        <div class="space-y-2 h-[calc(100%-2rem)] overflow-y-auto">
                            <p class="text-4xl font-bold text-blue-600">@Model.Current.Temperature째@Model.Current.TemperatureUnit</p>
                            <p class="text-gray-600">@Model.Current.ShortForecast</p>
                            <p class="text-gray-600">@Model.Current.DetailedForecast</p>
                        </div>
                    </div>
                
                    <div class="border-2 border-sky-500 bg-slate-50 p-4 rounded-lg shadow-2xl h-72 ">
                        <h3 class="text-xl font-semibold mb-2">Next 24 Hours</h3>
                        <div class="space-y-2 h-[calc(100%-2rem)] overflow-y-auto">
                            @foreach (var hour in Model.HourlyForecast.Take(24))
                            {
                                <div class="p-2 rounded-lg bg-slate-100 shadow-lg border-2 border-slate-200">
                                    <p>@hour.StartTime.ToString("h:mm tt"): @hour.Temperature째@hour.TemperatureUnit - @hour.ShortForecast</p>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="border-2 border-sky-500 bg-slate-50 p-4 rounded-lg shadow-2xl col-span-2">
                        <h3 class="text-xl font-semibold mb-2">7-Day Forecast</h3>
                        <div class="flex flex-row items-center justify-start overflow-x-auto">
                            @foreach (var chunk in Model.DailyForecast.Chunk(2))
                            {
                                <div class="flex-shrink-0 w-48 h-96 p-3 mx-2 rounded-lg bg-slate-100 shadow-lg border-2 border-slate-200 flex flex-col">
                                    @* First item *@
                                    <div class="flex-1 border-b border-slate-200 pb-2">
                                        <p class="font-medium text-lg mb-2">@chunk[0].Name</p>
                                        <p class="font-medium text-sm text-blue-600">Day</p>
                                        <p class="text-sm">@chunk[0].Temperature째@chunk[0].TemperatureUnit</p>
                                        <p class="text-sm truncate text-wrap">@chunk[0].ShortForecast</p>
                                    </div>
                                    
                                    @* Second item (if exists) *@
                                    @if (chunk.Length > 1)
                                    {
                                        <div class="flex-1 pt-2">
                                            <p class="font-medium text-lg mb-2">@chunk[1].Name</p>
                                            <p class="font-medium text-sm text-blue-600">Day</p>
                                            <p class="text-sm">@chunk[1].Temperature째@chunk[1].TemperatureUnit</p>
                                            <p class="text-sm truncate text-wrap">@chunk[1].ShortForecast</p>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>

                }

                @if (Context.Request.Query.ContainsKey("location") && Model == null)
                {
                    <div class="col-span-2 p-6 bg-red-50 border-2 border-red-200 rounded-lg shadow-lg">
                        <div class="flex items-center gap-3">
                            <svg class="w-6 h-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <p class="text-lg text-red-700 font-medium">Location not found. Please check the spelling and try again.</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>